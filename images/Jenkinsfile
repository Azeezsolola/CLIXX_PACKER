pipeline {
    agent any
//  parameters {
//   credentials credentialType: 'com.cloudbees.jenkins.plugins.awscredentials.AWSCredentialsImpl', defaultValue: 'AWS_CREDS_AUTOMATION_ACCT', name: 'AWS_AUTOMATION_ACCOUNT_CRED', required: false
// }

    environment {
        PATH = "${PATH}:${getTerraformPath()}:${getAnsiblePath()}:${getPackerPath()}"
    }
    stages{

         stage('Initial Stage') {
              steps {
                script {
                def userInput = input(id: 'confirm', message: 'Start Pipeline?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Start Pipeline', name: 'confirm'] ])
             }
           }
        }

         stage('Packer AMI Build'){
             steps {
                 withCredentials([string(credentialsId: 'MGT_ACC_AWS_ACCESS_KEY', variable: 'MGT_ACC_AWS_ACCESS_KEY'), string(credentialsId: 'MGT_ACCT_SECRET_KEY', variable: 'MGT_ACCT_SECRET_KEY')]){
                 sh """
                 export PACKER_LOG=1
                 export PACKER_LOG_PATH=$WORKSPACE/packer.log
                 
                 echo 
                 aws configure set aws_access_key_id ${MGT_ACC_AWS_ACCESS_KEY}
                 aws configure set aws_access_key_id ${MGT_ACC_SECRET_KEY}
                
                 packer build -force images/image.pkr.hcl
                 """
                 }
         }
         }

       
        
    }
}

 def getTerraformPath(){
        def tfHome= tool name: 'terraform-14', type: 'terraform'
        return tfHome
    }

 def getAnsiblePath(){
        def AnsibleHome= tool name: 'Ansible', type: 'org.jenkinsci.plugins.ansible.AnsibleInstallation'
        return AnsibleHome
    }

def getPackerPath(){
       def PackerHome= tool name: 'Packer', type: 'biz.neustar.jenkins.plugins.packer.PackerInstallation'
    }